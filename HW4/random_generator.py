import numpy as np

# Generate a random data point from Normal distribution
# the second method of generating a random data point from Normal from Wikipedia.
def normal(mean, var):
    '''
    Step 1: Generate 12 uniform deviates from standard uniform U(0,1)
    Step 2: Add them all up
    Step 3: Subtract 6
    Now, what we get is a data point from approximately standard normal distribution.
    Step 4: Scale and shift to the given normal distribution, using given parameters.
    '''
    d = np.sum(np.random.uniform(0.0, 1.0, 12)) - 6 # step 1~3
    # step 4
    return mean + d * np.sqrt(var)

# Randomly generate a data point from a polynomial basis linear model
def polynomial(n, a, w):
    '''
    n: the order/basis number of the polynomial basis linear model.
    y = W^T * phi(x) + e, where W is an n by 1 vector, e ~ N(0, a).
    a: the variance of the random noise "e" added.
    w: the weights vector
    '''
    # First, randomly generalize a data point x.
    x = np.random.uniform(-1.0, 1.0) # x ~ U(-1, 1)
    y = 0.0 # initialize y, the generated value to be output, with 0
    
    # W^T * phi(x)
    for i in range(n):
        y += w[i] * (x ** i)
    
    # random noise, generated by the function "normal" above
    e = normal(0.0, a)
    
    # Finally, y = W^T * phi(x) + e
    y += e
    
    # Return both x and y
    return x, y

